##### bfs algo
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    int vis[V]={0};
     vis[0]=1;
     vector<int>bfs;
     queue<int>q;
     q.push(0);
     while(!q.empty()){
         int node=q.front();
         q.pop();
         bfs.push_back(node);
         for(auto it: adj[node]){
           if (!vis[it]) {
             vis[it] = 1;
             q.push(it);
           }
         }
     }
     return bfs;
}



###dfs algo

    void dfs(int node,int vis[],vector<int>&ls,vector<int> adj[]){
        vis[node]=1;
        ls.push_back(node);
        for(auto it: adj[node]){
            if(!vis[it]){
                dfs(it,vis,ls,adj);
            }
        }
    }
  public:
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
         int vis[V]={0};
         vector<int>ls;
         dfs(0,vis,ls,adj);
         return ls;
    }